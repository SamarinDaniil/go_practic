// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventManagerClient is the client API for EventManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventManagerClient interface {
	MakeEvent(ctx context.Context, in *MakeEventRequest, opts ...grpc.CallOption) (*MakeEventResponse, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventResponse, error)
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (EventManager_GetEventsClient, error)
}

type eventManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewEventManagerClient(cc grpc.ClientConnInterface) EventManagerClient {
	return &eventManagerClient{cc}
}

func (c *eventManagerClient) MakeEvent(ctx context.Context, in *MakeEventRequest, opts ...grpc.CallOption) (*MakeEventResponse, error) {
	out := new(MakeEventResponse)
	err := c.cc.Invoke(ctx, "/event.EventManager/MakeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventManagerClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, "/event.EventManager/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventManagerClient) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventResponse, error) {
	out := new(DeleteEventResponse)
	err := c.cc.Invoke(ctx, "/event.EventManager/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventManagerClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (EventManager_GetEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventManager_ServiceDesc.Streams[0], "/event.EventManager/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventManagerGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventManager_GetEventsClient interface {
	Recv() (*GetEventsResponse, error)
	grpc.ClientStream
}

type eventManagerGetEventsClient struct {
	grpc.ClientStream
}

func (x *eventManagerGetEventsClient) Recv() (*GetEventsResponse, error) {
	m := new(GetEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventManagerServer is the server API for EventManager service.
// All implementations must embed UnimplementedEventManagerServer
// for forward compatibility
type EventManagerServer interface {
	MakeEvent(context.Context, *MakeEventRequest) (*MakeEventResponse, error)
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventResponse, error)
	GetEvents(*GetEventsRequest, EventManager_GetEventsServer) error
}

// UnimplementedEventManagerServer must be embedded to have forward compatible implementations.
type UnimplementedEventManagerServer struct {
}

func (UnimplementedEventManagerServer) MakeEvent(context.Context, *MakeEventRequest) (*MakeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeEvent not implemented")
}
func (UnimplementedEventManagerServer) GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedEventManagerServer) DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedEventManagerServer) GetEvents(*GetEventsRequest, EventManager_GetEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedEventManagerServer) mustEmbedUnimplementedEventManagerServer() {}

// UnsafeEventManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventManagerServer will
// result in compilation errors.
type UnsafeEventManagerServer interface {
	mustEmbedUnimplementedEventManagerServer()
}

func RegisterEventManagerServer(s grpc.ServiceRegistrar, srv EventManagerServer) {
	s.RegisterService(&EventManager_ServiceDesc, srv)
}

func _EventManager_MakeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagerServer).MakeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventManager/MakeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagerServer).MakeEvent(ctx, req.(*MakeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventManager_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagerServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventManager/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagerServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventManager_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagerServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventManager/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagerServer).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventManager_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventManagerServer).GetEvents(m, &eventManagerGetEventsServer{stream})
}

type EventManager_GetEventsServer interface {
	Send(*GetEventsResponse) error
	grpc.ServerStream
}

type eventManagerGetEventsServer struct {
	grpc.ServerStream
}

func (x *eventManagerGetEventsServer) Send(m *GetEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EventManager_ServiceDesc is the grpc.ServiceDesc for EventManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventManager",
	HandlerType: (*EventManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeEvent",
			Handler:    _EventManager_MakeEvent_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _EventManager_GetEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventManager_DeleteEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _EventManager_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eventmanager.proto",
}
